@model KartverketApplikasjon.Models.UnifiedMapViewModel

<div class="container-fluid">
    <div class="row">
        <div class="col-md-9">
            <div id="map" style="height: 600px;"></div>
        </div>
        <div class="col-md-3">
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">Stedsinformasjon</h5>
                    <div id="kommuneInfo" class="mb-3">
                        <!-- Kommune info will be displayed here -->
                    </div>
                </div>
            </div>

            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">Registrer Endring</h5>
                    <form id="changeForm">
                        <div class="mb-3">
                            <label class="form-label">Type Endring</label>
                            <select id="changeType" class="form-select" onchange="updateDescription()">
                                <option value="area">Områdeendring</option>
                                <option value="point">Punktkorreksjon</option>
                            </select>
                        </div>
                        <!-- Beskrivelse som endres dynamisk basert på valg -->
                        <div class="mb-3" id="dynamicDescription" style="font-style: italic; color: gray;">
                            <!-- Standard tekst når ingen valg er gjort -->
                            Velg en type endring for å se beskrivelse her.
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Beskrivelse</label>
                            <textarea id="description" class="form-control" rows="3" placeholder="Beskriv endringen du foreslår" required></textarea>
                        </div>
                        <input type="hidden" id="geoJsonInput" name="geoJson" />
                        <input type="hidden" id="latitudeInput" name="latitude" />
                        <input type="hidden" id="longitudeInput" name="longitude" />
                        <button type="submit" class="btn btn-primary">Send Inn Endring</button>
                    </form>
                </div>
            </div>

            <script>
                // Funksjon som oppdaterer beskrivelsen basert på valgt endringstype
                function updateDescription() {
                    const changeType = document.getElementById("changeType").value;
                    const descriptionDiv = document.getElementById("dynamicDescription");

                    if (changeType === "area") {
                        descriptionDiv.textContent = "Områdeendring – Juster grenser eller store geografiske områder som skog, vann eller mark.";
                    } else if (changeType === "point") {
                        descriptionDiv.textContent = "Punktkorreksjon – Korriger plasseringen av spesifikke punkter som bygninger eller veier.";
                    } else {
                        descriptionDiv.textContent = "Velg en type endring for å se beskrivelse her.";
                    }
                }

                // Kall funksjonen ved start for å sette standardbeskrivelse
                updateDescription();
            </script>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Recent Changes</h5>
                    <div id="recentChangesList" class="list-group">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>

    <script>
        let map, drawnItems;
        let currentMarker = null;

        function initMap() {
            map = L.map('map').setView([59.9139, 10.7522], 13);
            L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', {
                attribution: 'Map data © Kartverket'
            }).addTo(map);

            drawnItems = new L.FeatureGroup().addTo(map);

            const drawControl = new L.Control.Draw({
                edit: {
                    featureGroup: drawnItems
                },
                draw: {
                    polygon: true,
                    polyline: true,
                    rectangle: true,
                    circle: false,
                    marker: true
                }
            });
            map.addControl(drawControl);

            map.on(L.Draw.Event.CREATED, function (e) {
                drawnItems.clearLayers();
                const layer = e.layer;
                drawnItems.addLayer(layer);

                if (e.layerType === 'marker') {
                    const latLng = layer.getLatLng();
                    document.getElementById('latitudeInput').value = latLng.lat;
                    document.getElementById('longitudeInput').value = latLng.lng;
                    document.getElementById('changeType').value = 'point';
                    fetchKommuneInfo(latLng.lat, latLng.lng);
                } else {
                    document.getElementById('geoJsonInput').value = JSON.stringify(layer.toGeoJSON());
                    document.getElementById('changeType').value = 'area';
                    const bounds = layer.getBounds();
                    const center = bounds.getCenter();
                    fetchKommuneInfo(center.lat, center.lng);
                }
            });

            map.on('click', function(e) {
                fetchKommuneInfo(e.latlng.lat, e.latlng.lng);
            });

            loadExistingChanges();
            locateUser();
        }

        function fetchKommuneInfo(lat, lon) {
            const kommuneInfoDiv = document.getElementById('kommuneInfo');
            kommuneInfoDiv.innerHTML = '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';

            fetch(`https://api.kartverket.no/kommuneinfo/v1/punkt?nord=${lat}&ost=${lon}&koordsys=4326`)
                .then(response => response.json())
                .then(data => {
                    if (data.kommunenavn) {
                        kommuneInfoDiv.innerHTML = `
                            <div class="alert alert-info mb-0">
                                <strong>Kommune:</strong> ${data.kommunenavn}<br>
                                <strong>Kommune Number:</strong> ${data.kommunenummer}<br>
                                <strong>Coordinates:</strong> ${lat.toFixed(4)}, ${lon.toFixed(4)}
                            </div>`;
                    } else {
                        kommuneInfoDiv.innerHTML = '<div class="alert alert-warning mb-0">Kommune information not found</div>';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    kommuneInfoDiv.innerHTML = '<div class="alert alert-danger mb-0">Error fetching kommune information</div>';
                });
        }

        function locateUser() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    const lat = position.coords.latitude;
                    const lon = position.coords.longitude;
                    map.setView([lat, lon], 13);

                    L.marker([lat, lon])
                        .addTo(map)
                        .bindPopup('Your location')
                        .openPopup();

                    fetchKommuneInfo(lat, lon);
                }, function(error) {
                    console.error('Geolocation error:', error);
                });
            }
        }

        function loadExistingChanges() {
            fetch('/AreaChange/GetAllChanges')
                .then(response => response.json())
                .then(data => {
                    if (data.areas) {
                        data.areas.forEach(area => {
                            L.geoJSON(JSON.parse(area.geoJson)).addTo(map);
                        });
                    }

                    if (data.points) {
                        data.points.forEach(point => {
                            L.marker([point.latitude, point.longitude])
                                .bindPopup(point.description)
                                .addTo(map);
                        });
                    }

                    const recentList = document.getElementById('recentChangesList');
                    recentList.innerHTML = '';
                    [...(data.areas || []), ...(data.points || [])].sort((a, b) =>
                        new Date(b.submittedDate) - new Date(a.submittedDate)
                    ).slice(0, 5).forEach(change => {
                        const item = document.createElement('a');
                        item.className = 'list-group-item list-group-item-action';
                        item.textContent = change.description;
                        recentList.appendChild(item);
                    });
                });
        }

        document.getElementById('changeForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const data = {
                type: document.getElementById('changeType').value,
                description: document.getElementById('description').value,
                geoJson: document.getElementById('geoJsonInput').value,
                latitude: document.getElementById('latitudeInput').value,
                longitude: document.getElementById('longitudeInput').value
            };

            // Add debug logging
            console.log('Submitting data:', data);
            console.log('Latitude value:', document.getElementById('latitudeInput').value);
            console.log('Longitude value:', document.getElementById('longitudeInput').value);

            fetch('/AreaChange/SaveChange', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    console.log('Response status:', response.status);
                    return response.json();
                })
                .then(result => {
                    console.log('Save result:', result);
                    if (result.success) {
                        alert('Change saved successfully!');
                        drawnItems.clearLayers();
                        document.getElementById('changeForm').reset();
                        loadExistingChanges();
                    } else {
                        alert('Error saving change: ' + result.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error saving change');
                });
        });

        initMap();
    </script>
}