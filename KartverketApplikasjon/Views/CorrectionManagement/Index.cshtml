@using KartverketApplikasjon.Data
@using KartverketApplikasjon.Models
@using Microsoft.EntityFrameworkCore
@model (IEnumerable<MapCorrections> MapCorrections, IEnumerable<GeoChange> AreaChanges)
@inject ApplicationDbContext _context

@{
    ViewData["Title"] = "Correction Management";
    Layout = "_Layout";
}


<div class="container mt-4">
    <h2>Håndtering av innmeldinger</h2>

    <div class="mb-4">
        <div class="btn-group" role="group">
            <a asp-action="Index" asp-route-status="Pending"
               class="btn @(ViewBag.CurrentFilter == "Pågår" ? "btn-success" : "btn-outline-success")">
                PÅGÅR
            </a>
            <a asp-action="Index" asp-route-status="Approved"
               class="btn @(ViewBag.CurrentFilter == "Godkjent" ? "btn-success" : "btn-outline-success")">
                GODKJENT
            </a>
            <a asp-action="Index" asp-route-status="Rejected"
               class="btn @(ViewBag.CurrentFilter == "Avvist" ? "btn-success" : "btn-outline-success")">
                AVVIST
            </a>
            <a asp-action="Index" asp-route-status="Commune"
               class="btn @(ViewBag.CurrentFilter == "Kommune" ? "btn-success" : "btn-outline-success")">
                KOMMUNE
            </a>
            <a asp-action="Index" asp-route-status="All"
               class="btn @(ViewBag.CurrentFilter == "Alle" ? "btn-success" : "btn-outline-success")">
                ALLE
            </a>
        </div>
    </div>

    @if (TempData["Success"] != null)
    {
       
    }


    <div id="assignModal" class="custom-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Tildel Sak</h5>
                <span class="close-button">&times;</span>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Velg eller søk etter saksbehandler</label>
                    <input type="text" id="saksbehandlerSearch" class="form-control mb-2"
                           placeholder="Søk etter saksbehandler...">
                    <select id="saksbehandlerSelect" class="form-select" size="6">
                        @foreach (var handler in ViewBag.Saksbehandlere)
                        {
                            <option value="@handler.Email" data-name="@handler.Name.ToLower()">@handler.Name</option>
                        }
                    </select>
                </div>
                <div id="noResults" class="alert alert-info d-none">
                    Ingen saksbehandlere funnet
                </div>
            </div>
            <div class="modal-footer">
                <button id="cancelAssignment" class="btn btn-secondary">Avbryt</button>
                <button id="saveAssignment" class="btn btn-primary">Lagre</button>
            </div>
        </div>
    </div>
                            
                
                   
                
            
        
  

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <h3 class="mt-4 mb-3">Punktendringer</h3>
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Beskrivelse</th>
                    <th>Kommune</th>
                    <th>Innsender</th>
                    <th>Innsendelsdato</th>
                    <th>Status</th>
                    <th>Ansvarlig</th>
                    
                </tr>
            </thead>
            


            <tbody>
                @if (Model.MapCorrections.Any())
                {
                    @foreach (var item in Model.MapCorrections)
                    {
                        <tr>
                            <td>@item.Description</td>

                            <td id="municipality-@item.Id">Laster...</td>                           
                            <td>@item.SubmittedBy</td>
                            <td>@item.SubmittedDate.ToString("g")</td>
                            <td>
                                <span class="badge bg-@(item.Status switch {
                        CorrectionStatus.Pending => "warning",
                        CorrectionStatus.Approved => "success",
                        CorrectionStatus.Rejected => "danger",
                        _ => "secondary"
                    })">
                                    @item.Status
                                </span>
                            </td>
                            <td style="text-align: left; width: 150px;">
                                <div class="assignment-dropdown" style="width: 100%;">
                                    <button class="assignment-button @(string.IsNullOrEmpty(item.AssignedTo) ? "unassigned" : "assigned")"
                                            type="button" data-bs-toggle="dropdown">
                                        @{
                                            if (string.IsNullOrEmpty(item.AssignedTo))
                                            {
                                                @:UNASSIGNED
                                            }
                                            else
                                            {
                                                var assignedUser = await _context.Users.FirstOrDefaultAsync(u => u.Email == item.AssignedTo);
                                                @(assignedUser?.Name ?? "Unknown User")
                                            }
                                        }
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <a href="#" class="dropdown-item"
                                               data-action="assign"
                                               data-correction-id="@item.Id"
                                               data-correction-type="map">Tildel sak</a>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                            
                              
                                
                            
                            <td>
                                <a asp-action="Review" asp-route-id="@item.Id" asp-route-type="map"
                                   class="btn btn-sm btn-primary">Gjennomgå</a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="text-center">Ingen endringer er foreløpig sendt inn</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <h3 class="mt-5 mb-3">Områdeendringer</h3>
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Beskrivelse</th>
                    <th>Kommune</th>
                    <th>Innsender</th>
                    <th>Innsendelsdato</th>
                    <th>Status</th>
                    <th>Ansvarlig</th>
                    
                </tr>
            </thead>
            <tbody>
                @if (Model.AreaChanges.Any())
                {
                    @foreach (var item in Model.AreaChanges)
                    {
                        <tr>
                            <td>@item.Description</td>
                            <td id="municipality-area-@item.Id">Laster...</td>
                            <td>@item.SubmittedBy</td>
                            <td>@item.SubmittedDate.ToString("g")</td>
                            <td>
                                <span class="badge bg-@(item.Status switch {
                                    CorrectionStatus.Pending => "warning",
                                    CorrectionStatus.Approved => "success",
                                    CorrectionStatus.Rejected => "danger",
                                    _ => "secondary"
                                })">
                                    @item.Status
                                </span>
                            </td>
                            
                            <td style="text-align: left; width: 150px;">                                
                                <div class="assignment-dropdown" style="width: 100%;">
                                    <button class="assignment-button @(string.IsNullOrEmpty(item.AssignedTo) ? "unassigned" : "assigned")"
                                            type="button" data-bs-toggle="dropdown">
                                            @{
                                                if (string.IsNullOrEmpty(item.AssignedTo))
                                                {
                                                    @:UNASSIGNED
                                                }
                                                else
                                                {
                                                    var assignedUser = await _context.Users.FirstOrDefaultAsync(u => u.Email == item.AssignedTo);
                                                    @(assignedUser?.Name ?? "Unknown User")
                                                }
                                            }
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <a href="#" class="dropdown-item"
                                               data-action="assign"
                                               data-correction-id="@item.Id"
                                               data-correction-type="area">Tildel sak</a>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                            <td>
                                <a asp-action="Review" asp-route-id="@item.Id" asp-route-type="area"
                                   class="btn btn-sm btn-primary">Gjennomgå</a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="text-center">Ingen endringer er foreløpig sendt inn</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@section Scripts {
    <script>
        // Modal functionality
        const modal = document.getElementById('assignModal');
        const closeBtn = document.querySelector('.close-button');
        const searchInput = document.getElementById('saksbehandlerSearch');
        const selectElement = document.getElementById('saksbehandlerSelect');
        const noResults = document.getElementById('noResults');
        let selectedCorrectionId = null;
        let selectedCorrectionType = null;

        // Municipality fetching function
        async function fetchMunicipality(lat, lng, elementId) {
            const params = new URLSearchParams({
                nord: lat.toString(),
                ost: lng.toString(),
                koordsys: '4326'
            });

            try {
                const response = await fetch(`https://api.kartverket.no/kommuneinfo/v1/punkt?${params.toString()}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                document.getElementById(elementId).textContent =
                    data && data.kommunenavn ? `${data.kommunenummer} ${data.kommunenavn}` : 'Ikke funnet';
            } catch (error) {
                console.error('Error fetching municipality:', error);
                document.getElementById(elementId).textContent = 'Kunne ikke bestemme kommune';
            }
        }

        // Fetch municipalities for map corrections
        @foreach (var item in Model.MapCorrections)
        {
            if (!string.IsNullOrEmpty(item.Latitude) && !string.IsNullOrEmpty(item.Longitude))
            {
                @:fetchMunicipality(@item.Latitude, @item.Longitude, 'municipality-@item.Id');
            }
        }

        // Fetch municipalities for area changes
        @foreach (var item in Model.AreaChanges)
        {
            if (!string.IsNullOrEmpty(item.GeoJson))
            {
                <text>
                    try {
                        const geoJson = JSON.parse(@Html.Raw(Json.Serialize(item.GeoJson)));
                        if (geoJson.geometry && geoJson.geometry.coordinates && geoJson.geometry.coordinates[0]) {
                            const coords = geoJson.geometry.coordinates[0];
                            const centerLat = coords.reduce((sum, coord) => sum + coord[1], 0) / coords.length;
                            const centerLon = coords.reduce((sum, coord) => sum + coord[0], 0) / coords.length;
                            fetchMunicipality(centerLat, centerLon, 'municipality-area-@item.Id');
                        }
                    } catch (e) {
                        console.error('Error parsing GeoJSON:', e);
                        document.getElementById('municipality-area-@item.Id').textContent = 'Error';
                    }
                </text>
            }
        }

            // Show modal when "Assign Case" is clicked
            document.addEventListener('click', function (e) {
                if (e.target.dataset.action === 'assign') {
                    selectedCorrectionId = e.target.dataset.correctionId;
                    selectedCorrectionType = e.target.dataset.correctionType;
                    modal.style.display = 'block';
                    searchInput.value = '';
                    filterOptions('');
                }
            });

        // Handle search input
        searchInput.addEventListener('input', function (e) {
            filterOptions(e.target.value.toLowerCase());
        });

        // Close modal handlers
        closeBtn.onclick = function() {
            modal.style.display = 'none';
        }

        document.getElementById('cancelAssignment').onclick = function() {
            modal.style.display = 'none';
        }

        // Close if clicking outside modal
        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }

        // Search functionality
        let searchTimeout;
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            const searchTerm = this.value.trim();
            
            searchTimeout = setTimeout(() => {
                if (searchTerm.length >= 2) {
                    fetchSaksbehandlere(searchTerm);
                } else {
                    searchResults.innerHTML = '';
                }
            }, 300);
        });

       

      
        // Filter options based on search
        function filterOptions(searchTerm) {
            let hasVisibleOptions = false;
            Array.from(selectElement.options).forEach(option => {
                const name = option.getAttribute('data-name');
                const email = option.value.toLowerCase();
                const matches = name.includes(searchTerm) || email.includes(searchTerm);
                option.style.display = matches ? '' : 'none';
                if (matches) hasVisibleOptions = true;
            });

            noResults.classList.toggle('d-none', hasVisibleOptions);
        }

        // Select handler
        function selectHandler(handler) {
            document.getElementById('selectedHandler').style.display = 'block';
            document.getElementById('selectedHandlerName').textContent = handler.name;
            document.getElementById('selectedHandlerId').value = handler.email;
            searchResults.innerHTML = '';
            searchInput.value = '';
        }

        // Handle assignment save
        document.getElementById('saveAssignment').addEventListener('click', async function () {
            // Get value directly from select element
            const selectedHandlerId = document.getElementById('saksbehandlerSelect').value;
            console.log('Selected handler ID:', selectedHandlerId); // For debugging

            if (!selectedHandlerId) {
                alert('Vennligst velg en saksbehandler');
                return;
            }

            try {
                const response = await fetch('/CorrectionManagement/AssignCase', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        correctionId: selectedCorrectionId,
                        correctionType: selectedCorrectionType,
                        assignTo: selectedHandlerId
                    })
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Feil ved tildeling av sak');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Feil ved tildeling av sak');
            }
        });
    </script>
}