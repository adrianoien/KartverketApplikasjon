@model CorrectionReviewViewModel
@{
    ViewData["Title"] = "Review Change";
}

<div class="container mt-4">
    <h2>Review @(Model.Type == "map" ? "Map Correction" : "Area Change")</h2>

    <div class="row">
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Change Details</h5>
                    <dl class="row">
                        <dt class="col-sm-4">Description</dt>
                        <dd class="col-sm-8">@Model.Description</dd>

                        @if (Model.Type == "map")
                        {
                            <dt class="col-sm-4">Location</dt>
                            <dd class="col-sm-8">[@Model.Latitude, @Model.Longitude]</dd>
                        }

                        <dt class="col-sm-4">Municipality</dt>
                        <dd class="col-sm-8" id="municipality">Loading...</dd>

                        <dt class="col-sm-4">Submitted By</dt>
                        <dd class="col-sm-8">@Model.SubmittedBy</dd>

                        <dt class="col-sm-4">Submitted Date</dt>
                        <dd class="col-sm-8">@Model.SubmittedDate.ToString("g")</dd>

                        <dt class="col-sm-4">Current Status</dt>
                        <dd class="col-sm-8">@Model.Status</dd>
                    </dl>
                </div>
            </div>

            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Review Decision</h5>
                    <form asp-action="Review" method="post">
                        <input type="hidden" asp-for="Id" />
                        <input type="hidden" name="type" value="@Model.Type" />

                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <select name="status" class="form-select" required>
                                <option value="">Select status...</option>
                                <option value="Approved">Approve</option>
                                <option value="Rejected">Reject</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Review Comment</label>
                            <textarea name="reviewComment" class="form-control" rows="3" required></textarea>
                        </div>

                        <div class="mb-3">
                            <button type="submit" class="btn btn-primary">Submit Review</button>
                            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Location Map</h5>
                    <div id="map" style="height: 400px; width: 100%;"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Sjekk om kartet allerede eksisterer
        if (typeof map === 'undefined') {
            // Hvis ikke, initialiser et nytt kart
            var map = L.map('map').setView([62.0, 10.0], 4);

            // Bruk Kartverkets tile layer
            L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', {
                attribution: 'Map data © Kartverket',
                maxZoom: 18,
                minZoom: 3
            }).addTo(map);
        } else {
            console.log("Kartet er allerede initialisert.");
        }

        @if (Model.Type == "map")
        {
            <text>
                    (function () {
                        // Default coordinates for Norway if none provided
                        var defaultLat = 62.0;
                    var defaultLng = 10.0;

                    // Get coordinates from model
                    var lat = '@Model.Latitude';
                    var lng = '@Model.Longitude';

                    console.log('Raw coordinates:', {lat, lng});

                    // Parse coordinates, use defaults if invalid
                    lat = !isNaN(parseFloat(lat)) ? parseFloat(lat) : defaultLat;
                    lng = !isNaN(parseFloat(lng)) ? parseFloat(lng) : defaultLng;

                    console.log('Parsed coordinates:', {lat, lng});

                    map.whenReady(function () {
                        console.log('Setting map view to:', { lat, lng });
                    map.setView([lat, lng], lat === defaultLat ? 4 : 15);

                    if (lat !== defaultLat || lng !== defaultLng) {
                        L.marker([lat, lng])
                            .addTo(map)
                            .bindPopup('@Html.Raw(Json.Serialize(Model.Description))')
                            .openPopup();
                            }

                    // Only fetch municipality if we're not using default coordinates
                    if (lat !== defaultLat && lng !== defaultLng) {
                                const params = new URLSearchParams({
                        nord: lat.toString(),
                    ost: lng.toString(),
                    koordsys: '4326'
                                });

                    const apiUrl = `https://api.kartverket.no/kommuneinfo/v1/punkt?${params}`;
                    console.log('Fetching municipality data from:', apiUrl);

                    fetch(apiUrl)
                                    .then(response => {
                        console.log('Municipality API response:', response.status);
                    if (!response.ok) {
                                            throw new Error(`HTTP error! status: ${response.status}`);
                                        }
                    return response.json();
                                    })
                                    .then(data => {
                        console.log('Municipality data:', data);
                    document.getElementById('municipality').textContent =
                    data && data.kommunenavn ? data.kommunenavn : 'Not found';
                                    })
                    .catch(function (error) {
                        console.error('Error fetching municipality:', error);
                    document.getElementById('municipality').textContent =
                    'Could not determine municipality';
                                    });
                            } else {
                        document.getElementById('municipality').textContent = 'No location specified';
                            }
                        });
                    })(); // Close IIFE
            </text>
        }
    </script>
}