@model DashboardViewModel

<div class="container">
    <h2>Oversikt for korrigeringer</h2>

    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card bg-dark text-white">
                <div class="card-body">
                    <h5 class="card-title">
                        VENTENDE GJENNOMGANGER
                    </h5>
                    <h2>@Model.PendingCount</h2>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <h5 class="card-title">GODKJENT DENNE UKEN</h5>
                    <h2>@Model.ApprovedThisWeek</h2>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <h5 class="card-title">AVVIST DENNE UKEN</h5>
                    <h2>@Model.RejectedThisWeek</h2>
                </div>
            </div>
        </div>
    </div>

    <!-- Plasser dette rett under "OVERSIKT FOR KORRIGERINGER" -->
    <div class="filter-section mb-4">
        <h3>Filtrer på kommune</h3>
        <select id="kommuneFilter" class="form-control" onchange="filterByKommune(this.value)">
            <option value="">Alle kommuner</option>
            <option value="4204">Kristiansand</option>
            <option value="4022">Seljord</option>
            <option value="4016">Drangedal</option>
        </select>
    </div>

    <script>
        function filterByKommune(kommuneNr) {
            // Hent alle listeelementer for både punktkorreksjoner og områdeendringer
            const listItems = document.querySelectorAll('.list-group-item');

            listItems.forEach(item => {
                // Finn kommune-span i hvert element
                const kommuneSpan = item.querySelector('[id^="municipality-"], [id^="municipality-area-"]');
                if (kommuneSpan) {
                    const kommuneText = kommuneSpan.textContent;

                    // Vis alle hvis ingen kommune er valgt, ellers sjekk om kommunenummer matcher
                    if (!kommuneNr || kommuneText.includes(kommuneNr)) {
                        item.style.display = '';
                    } else {
                        item.style.display = 'none';
                    }
                }
            });

            // Oppdater tellere
            updateCounters();
        }

        function updateCounters() {
            // Tell synlige saker med "Venter" status
            const ventendeSaker = document.querySelectorAll('.list-group-item:not([style*="display: none"]) .badge.bg-warning').length;

            // Oppdater VENTENDE GJENNOMGANGER teller
            const ventendeElement = document.querySelector('.card.bg-dark h2');
            if (ventendeElement) {
                ventendeElement.textContent = ventendeSaker;
            }
        }
                    function populateKommuneFilter() {
            // Finn alle kommune-spans
            const kommuneElements = document.querySelectorAll('[id^="municipality-"], [id^="municipality-area-"]');
            const kommuneMap = new Map(); // Bruk Map for å sikre unike verdier

            // Samle alle unike kommuner
            kommuneElements.forEach(element => {
                const kommuneText = element.textContent.trim();
                if (kommuneText && kommuneText !== 'Laster...' && kommuneText !== 'Error') {
                    const [kommuneNr, ...kommuneNavnDeler] = kommuneText.split(' ');
                    const kommuneNavn = kommuneNavnDeler.join(' ');
                    // Bruk kommuneNavn som nøkkel for å unngå duplikater
                    kommuneMap.set(kommuneNavn, { nummer: kommuneNr, navn: kommuneNavn });
                }
            });

            // Oppdater dropdown
            const kommuneFilter = document.getElementById('kommuneFilter');
            kommuneFilter.innerHTML = '<option value="">Alle kommuner</option>';

            // Konverter Map til Array, sorter og legg til kommuner
            [...kommuneMap.values()]
                .sort((a, b) => a.navn.localeCompare(b.navn))
                .forEach(kommune => {
                    const option = document.createElement('option');
                    option.value = kommune.nummer;
                    option.textContent = kommune.navn;
                    kommuneFilter.appendChild(option);
                });
        }

        // Kall populateKommuneFilter når kommunedata er lastet
        document.addEventListener('DOMContentLoaded', function() {
            // Sjekk hvert sekund om kommunedataene er lastet
            const checkInterval = setInterval(() => {
                const loadingElements = document.querySelectorAll('[id^="municipality-"][textContent="Laster..."]');
                if (loadingElements.length === 0) {
                    // Alle kommuner er lastet
                    populateKommuneFilter();
                    clearInterval(checkInterval);
                }
            }, 1000);

            // Stopp sjekking etter 10 sekunder uansett
            setTimeout(() => clearInterval(checkInterval), 10000);
        });
    </script>


    <style>
        .filter-section {
            margin: 20px 0;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }

        #kommuneFilter {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
    </style>
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Nylige Innmeldinger</h5>
                    <div class="list-group">
                        @if (Model.RecentMapCorrections.Any())
                        {
                            <h6 class="mt-3">Punktkorreksjoner</h6>
                            @foreach (var correction in Model.RecentMapCorrections)
                            {
                                <div class="list-group-item">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">@correction.Description</h6>
                                        <small>@correction.SubmittedDate.ToString("g")</small>
                                    </div>
                                    <div class="mb-1">
                                        <p class="mb-1">Koordinater: [@correction.Latitude, @correction.Longitude]</p>
                                        <p class="mb-1">Kommune: <span id="municipality-@correction.Id">Laster...</span></p>
                                    </div>
                                    <small>Innsender: @correction.SubmittedBy</small>
                                    <span class="badge bg-@(correction.Status switch {
                                    CorrectionStatus.Pending => "warning",
                                    CorrectionStatus.Approved => "success",
                                    CorrectionStatus.Rejected => "danger",
                                    _ => "secondary"
                                })">@correction.Status.ToNorwegian()</span>
                                </div>
                            }
}
</style>

                        @if (Model.RecentAreaChanges.Any())
                        {
                            <h6 class="mt-3">Områdeendringer</h6>
                            @foreach (var change in Model.RecentAreaChanges)
                            {
                                <div class="list-group-item">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">@change.Description</h6>
                                        <small>@change.SubmittedDate.ToString("g")</small>
                                    </div>
                                    <div class="mb-1">
                                        <p class="mb-1">Kommune: <span id="municipality-area-@change.Id">Laster...</span></p>
                                    </div>
                                    <small>Innsender: @change.SubmittedBy</small>
                                    <span class="badge bg-@(change.Status switch {
                                    CorrectionStatus.Pending => "warning",
                                    CorrectionStatus.Approved => "success",
                                    CorrectionStatus.Rejected => "danger",
                                    _ => "secondary"
                                })">@change.Status.ToNorwegian()</span>
                                </div>
                            }
                        }

                        @if (!Model.RecentMapCorrections.Any() && !Model.RecentAreaChanges.Any())
                        {
                            <div class="list-group-item">
                                <p class="mb-0 text-muted">Ingen nylige innmeldinger</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Hurtighandlinger</h5>
                    <div class="list-group">
                        <a href="@Url.Action("Index", new { status = "Pending" })" class="list-group-item list-group-item-action">
                            Vis Ventende Gjennomganger
                        </a>
                        <a href="@Url.Action("Index", new { status = "All" })" class="list-group-item list-group-item-action">
                            Vis Alle Innsendinger
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // First define the function
    async function fetchMunicipality(lat, lng, elementId) {
        const params = new URLSearchParams({
            nord: lat.toString(),
            ost: lng.toString(),
            koordsys: '4326'
        });
        try {
            const response = await fetch(`https://api.kartverket.no/kommuneinfo/v1/punkt?${params.toString()}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            document.getElementById(elementId).textContent =
                data && data.kommunenavn ? `${data.kommunenummer} ${data.kommunenavn}` : 'Ikke funnet';
        } catch (error) {
            console.error('Error fetching municipality:', error);
            document.getElementById(elementId).textContent = 'Kunne ikke bestemme kommune';
        }
    }

    // Then use it for map corrections (only once)
    @foreach (var correction in Model.RecentMapCorrections)
    {
        if (!string.IsNullOrEmpty(correction.Latitude) && !string.IsNullOrEmpty(correction.Longitude))
        {
            @:fetchMunicipality(@correction.Latitude, @correction.Longitude, 'municipality-@correction.Id');
        }
    }

        // And for area changes
    @foreach (var change in Model.RecentAreaChanges)
    {
        if (!string.IsNullOrEmpty(change.GeoJson))
        {
            <text>
                    try {
                            const geoJson = JSON.parse(@Html.Raw(Json.Serialize(change.GeoJson)));
                    if (geoJson.geometry && geoJson.geometry.coordinates && geoJson.geometry.coordinates[0]) {
                                const coords = geoJson.geometry.coordinates[0];
                                const centerLat = coords.reduce((sum, coord) => sum + coord[1], 0) / coords.length;
                                const centerLon = coords.reduce((sum, coord) => sum + coord[0], 0) / coords.length;
                    fetchMunicipality(centerLat, centerLon, 'municipality-area-@change.Id');
                            }
                        } catch (e) {
                        console.error('Error parsing GeoJSON:', e);
                    document.getElementById('municipality-area-@change.Id').textContent = 'Error';
                        }
            </text>
        }
    }
</script>